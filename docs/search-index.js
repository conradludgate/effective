var searchIndex = JSON.parse('{\
"effective":{"doc":"","t":"QNEIIINQDQQQQQNDIIIIQLLLLLLLLLLLLKAMLLLLLLLKLLLLLKLLLKLKLKLLLLAIALALLLLALDLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLDDDLLLLLLLLLFFMMMLLLFLLLLLLLLLLLLLL","n":["Awaits","Done","EffectResult","Effective","Exists","Get","Item","Item","Okay","Output","Output","Output","Output","Output","Pending","Shim","TryAsyncIterator","TryFuture","TryGet","TryIterator","Yields","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","branch","from","from","from","from_output","from_residual","get","impls","inner","into","into","into","into_future","into_iter","next","poll","poll_effect","poll_next","poll_next","try_from","try_from","try_from","try_get","try_into","try_into","try_into","try_next","try_next","try_poll","try_poll","try_poll_next","try_poll_next","type_id","type_id","type_id","wrappers","EffectiveExt","collect","collect","flatten","flatten","flatten_items","flatten_okay","into_shim","map","map","Collect","borrow","borrow_mut","from","into","poll_effect","try_from","try_get","try_into","try_poll","type_id","Flatten","FlattenItems","FlattenOkay","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","poll_effect","poll_effect","poll_effect","try_from","try_from","try_from","try_get","try_get","try_get","try_into","try_into","try_into","try_poll","try_poll","try_poll","try_poll_next","try_poll_next","try_poll_next","type_id","type_id","type_id","Map","borrow","borrow_mut","from","into","poll_effect","try_from","try_get","try_into","try_poll","try_poll_next","type_id","FromTry","FutureShim","IteratorShim","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","from_try","future","inner","inner","inner","into","into","into","iterator","poll_effect","poll_effect","poll_effect","try_from","try_from","try_from","try_get","try_into","try_into","try_into","try_poll","type_id","type_id","type_id"],"q":["effective","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","effective::impls","","","","","","","","","","effective::impls::collect","","","","","","","","","","","effective::impls::flatten","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","effective::impls::map","","","","","","","","","","","","effective::wrappers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Models whether this effective type can await","No more items will be ready","","<code>Effective</code> encapsulates all possible effect types that Rust …","","A useless trait with 0 possible effects.","An item is ready","Models how this effective type can fail.","A <code>Try</code> type that always continues and never breaks","","","","","","No items are ready yet","Used for demonstrating how effective <code>Effective</code> is.","<code>Try</code> + <code>AsyncIterator</code>","<code>Try</code> + <code>Future</code>","<code>Get</code> + <code>Try</code>","<code>Try</code> + <code>Iterator</code>","Models whether this effective type can yield multiple …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Collect the items from this iterator into a collection","","","Flatten the items in the effective","","","","Map the items in the effective","Produced by the <code>collect()</code> method","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Produced by the <code>flatten()</code> method","Produced by the <code>flatten()</code> method","Produced by the <code>flatten()</code> method","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Produced by the <code>map()</code> method","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[4,11,0,0,0,0,11,4,0,28,29,30,31,32,11,0,0,0,0,0,4,1,11,6,1,11,6,1,1,11,6,1,1,28,0,6,1,11,6,6,6,6,6,4,6,6,1,11,6,29,1,11,6,32,6,30,6,31,6,1,11,6,0,0,0,33,0,33,33,33,33,0,33,0,17,17,17,17,17,17,17,17,17,17,0,0,0,18,20,19,18,20,19,18,20,19,18,20,19,18,20,19,18,20,19,18,20,19,18,20,19,18,20,19,18,20,19,18,20,19,0,22,22,22,22,22,22,22,22,22,22,22,0,0,0,23,24,25,23,24,25,23,24,25,0,0,23,24,25,23,24,25,0,23,24,25,23,24,25,23,23,24,25,24,23,24,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[[]],[[]],[[]],[[],1],[3,1],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[[6,[[0,[4,5]]]]],7],[[[8,[[6,[4]]]],9],10],[[8,9],11],[[[8,[[6,[4]]]],9],[[10,[7]]]],[[[8,[[6,[4]]]],9],[[10,[7]]]],[[],12],[[],12],[[],12],[[]],[[],12],[[],12],[[],12],[[],7],[[[6,[[0,[4,5]]]]],7],[[8,9],10],[[8,9],10],[[8,9],[[10,[7]]]],[[8,9],[[10,[[7,[12]]]]]],[[],13],[[],13],[[],13],0,0,0,[[[0,[14,4]]],[[17,[[0,[14,4]],[0,[15,16]]]]]],0,[14,[[18,[14]]]],[14,[[19,[14]]]],[14,[[20,[14]]]],[14,[[6,[14]]]],0,[[14,21],[[22,[[0,[15,16]],14,21]]]],0,[[]],[[]],[[]],[[]],[[[8,[[17,[4,[0,[15,16]]]]]],9],11],[[],12],[[]],[[],12],[[8,9],10],[[],13],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[18,[4]]]],9],11],[[[8,[[20,[4]]]],9],11],[[[8,[[19,[4]]]],9],11],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[8,9],10],[[8,9],10],[[8,9],10],[[8,9],[[10,[7]]]],[[8,9],[[10,[7]]]],[[8,9],[[10,[7]]]],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],[[]],[[[8,[[22,[[0,[15,16]],4,21]]]],9],11],[[],12],[[]],[[],12],[[8,9],10],[[8,9],[[10,[7]]]],[[],13],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],24],0,0,0,[[]],[[]],[[]],[[],25],[[[8,[[23,[15]]]],9],11],[[[8,[[24,[26]]]],9],11],[[[8,[[25,[27]]]],9],11],[[],12],[[],12],[[],12],[[]],[[],12],[[],12],[[],12],[[8,9],10],[[],13],[[],13],[[],13]],"p":[[3,"Okay"],[4,"ControlFlow"],[15,"never"],[8,"Effective"],[8,"Unpin"],[3,"Shim"],[4,"Option"],[3,"Pin"],[3,"Context"],[4,"Poll"],[4,"EffectResult"],[4,"Result"],[3,"TypeId"],[8,"Sized"],[8,"Try"],[8,"FromResidual"],[3,"Collect"],[3,"Flatten"],[3,"FlattenItems"],[3,"FlattenOkay"],[8,"FnMut"],[3,"Map"],[3,"FromTry"],[3,"FutureShim"],[3,"IteratorShim"],[8,"Future"],[8,"Iterator"],[8,"Get"],[8,"TryGet"],[8,"TryFuture"],[8,"TryAsyncIterator"],[8,"TryIterator"],[8,"EffectiveExt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
