var searchIndex = JSON.parse('{\
"effective":{"doc":"","t":"QNSEIININQQQQQQNQQQQQDIIIIQLLLLLLKAMLLLLLLKLLLLKLLKLKLKLLLAIALALALLLALALDIDKLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLLLDDDLLLLLLLLLFFLMMMLLLFLLLLLLLLLLLLLL","n":["Awaits","Done","EXISTS","EffectResult","Effective","Exists","Failure","Get","Item","Output","Output","Output","Output","Output","Output","Pending","Residual","Residual","Residual","Residual","Residual","Shim","TryAsyncIterator","TryFuture","TryGet","TryIterator","Yields","borrow","borrow","borrow_mut","borrow_mut","from","from","get","impls","inner","into","into","into_future","into_iter","next","poll","poll_effect","poll_next","poll_next","try_from","try_from","try_get","try_into","try_into","try_next","try_next","try_poll","try_poll","try_poll_next","try_poll_next","type_id","type_id","wrappers","EffectiveExt","block","block","collect","collect","flatten","flatten","flatten_error","into_shim","map","map","unwrap","unwrap","Block","Executor","FuturesExecutor","block_on","block_on","borrow","borrow","borrow_mut","borrow_mut","default","from","from","get","into","into","poll_effect","try_from","try_from","try_get","try_into","try_into","type_id","type_id","Collect","borrow","borrow_mut","from","get","into","poll_effect","try_from","try_get","try_into","try_poll","type_id","Flatten","FlattenError","borrow","borrow","borrow_mut","borrow_mut","from","from","get","get","into","into","poll_effect","poll_effect","try_from","try_from","try_get","try_get","try_into","try_into","try_poll","try_poll","try_poll_next","try_poll_next","type_id","type_id","Map","borrow","borrow_mut","from","get","into","poll_effect","try_from","try_get","try_into","try_poll","try_poll_next","type_id","Unwrap","borrow","borrow_mut","from","get","into","poll_effect","try_from","try_get","try_into","try_poll","try_poll_next","type_id","FromTry","FutureShim","IteratorShim","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","from_try","future","get","inner","inner","inner","into","into","into","iterator","poll_effect","poll_effect","poll_effect","try_from","try_from","try_from","try_get","try_into","try_into","try_into","try_poll","type_id","type_id","type_id"],"q":["effective","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","effective::impls","","","","","","","","","","","","","effective::impls::block","","","","","","","","","","","","","","","","","","","","","","","effective::impls::collect","","","","","","","","","","","","effective::impls::flatten","","","","","","","","","","","","","","","","","","","","","","","","","","effective::impls::map","","","","","","","","","","","","","effective::impls::unwrap","","","","","","","","","","","","","effective::wrappers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Models whether this effective type can await","No more items will be ready","","","<code>Effective</code> encapsulates all possible effect types that Rust …","","A failure occured","A useless trait with 0 possible effects.","An item is ready","What item does this effective type produce","","","","","","No items are ready yet","What non-success types can this effective produce","","","","","Used for demonstrating how effective <code>Effective</code> is.","<code>Try</code> + <code>AsyncIterator</code>","<code>Try</code> + <code>Future</code>","<code>Get</code> + <code>Try</code>","<code>Try</code> + <code>Iterator</code>","Models whether this effective type can yield multiple …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Block on the async effective","","Collect the items from this iterator into a collection.","","Flatten the items in the effective","","","","Map the items in the effective","","Block on the async effective","Produced by the <code>block()</code> method","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Produced by the <code>collect()</code> method","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Produced by the <code>flatten()</code> method","Produced by the <code>flatten()</code> method","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Produced by the <code>map()</code> method","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Produced by the <code>unwrap()</code> method","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[1,8,31,0,0,0,8,0,8,1,32,33,34,35,36,8,1,33,34,35,36,0,0,0,0,0,1,8,3,8,3,8,3,32,0,3,8,3,3,3,3,3,1,3,3,8,3,33,8,3,36,3,34,3,35,3,8,3,0,0,0,37,0,37,0,37,37,37,0,37,0,37,0,0,0,15,26,26,16,26,16,26,26,16,16,26,16,16,26,16,16,26,16,26,16,0,19,19,19,19,19,19,19,19,19,19,19,0,0,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,0,23,23,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,27,28,29,27,28,29,27,28,29,0,0,27,27,28,29,27,28,29,0,27,28,29,27,28,29,27,27,28,29,28,27,28,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],4],[[[5,[[3,[1]]]],6],7],[[5,6],8],[[[5,[[3,[1]]]],6],[[7,[4]]]],[[[5,[[3,[1]]]],6],[[7,[4]]]],[[],9],[[],9],[[],[[0,[10,11]]]],[[],9],[[],9],[[],[[4,[12]]]],[[[3,[[0,[1,2]]]]],[[4,[12]]]],[[5,6],[[7,[12]]]],[[5,6],7],[[5,6],[[7,[[4,[12]]]]]],[[5,6],[[7,[[4,[9]]]]]],[[],13],[[],13],0,0,0,[[[0,[14,1]],15],[[16,[[0,[14,1]],15]]]],0,[[[0,[14,1]]],[[19,[[0,[14,1]],[0,[17,18]]]]]],0,[14,[[20,[14]]]],[[[0,[14,1]]],[[21,[[0,[14,1]]]]]],[14,[[3,[14]]]],0,[[14,22],[[23,[14,22]]]],0,[14,[[24,[14]]]],0,0,0,[25],[[26,25]],[[]],[[]],[[]],[[]],[[],26],[[]],[[]],[[]],[[]],[[]],[[[5,[[16,[1,15]]]],6],8],[[],9],[[],9],[[],[[0,[10,11]]]],[[],9],[[],9],[[],13],[[],13],0,[[]],[[]],[[]],[[]],[[]],[[[5,[[19,[1,[0,[17,18]]]]]],6],8],[[],9],[[],[[0,[10,11]]]],[[],9],[[5,6],[[7,[12]]]],[[],13],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[[20,[1]]]],6],8],[[[5,[[21,[1]]]],6],8],[[],9],[[],9],[[],[[0,[10,11]]]],[[],[[0,[10,11]]]],[[],9],[[],9],[[5,6],[[7,[12]]]],[[5,6],[[7,[12]]]],[[5,6],[[7,[[4,[12]]]]]],[[5,6],[[7,[[4,[12]]]]]],[[],13],[[],13],0,[[]],[[]],[[]],[[]],[[]],[[[5,[[23,[1,22]]]],6],8],[[],9],[[],[[0,[10,11]]]],[[],9],[[5,6],[[7,[12]]]],[[5,6],[[7,[[4,[12]]]]]],[[],13],0,[[]],[[]],[[]],[[]],[[]],[[[5,[[24,[1]]]],6],8],[[],9],[[],[[0,[10,11]]]],[[],9],[[5,6],[[7,[12]]]],[[5,6],[[7,[[4,[12]]]]]],[[],13],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],28],[[]],0,0,0,[[]],[[]],[[]],[[],29],[[[5,[[27,[11]]]],6],8],[[[5,[[28,[25]]]],6],8],[[[5,[[29,[30]]]],6],8],[[],9],[[],9],[[],9],[[],[[0,[10,11]]]],[[],9],[[],9],[[],9],[[5,6],[[7,[12]]]],[[],13],[[],13],[[],13]],"p":[[8,"Effective"],[8,"Unpin"],[3,"Shim"],[4,"Option"],[3,"Pin"],[3,"Context"],[4,"Poll"],[4,"EffectResult"],[4,"Result"],[8,"FromResidual"],[8,"Try"],[4,"ControlFlow"],[3,"TypeId"],[8,"Sized"],[8,"Executor"],[3,"Block"],[8,"Default"],[8,"Extend"],[3,"Collect"],[3,"Flatten"],[3,"FlattenError"],[8,"FnMut"],[3,"Map"],[3,"Unwrap"],[8,"Future"],[3,"FuturesExecutor"],[3,"FromTry"],[3,"FutureShim"],[3,"IteratorShim"],[8,"Iterator"],[8,"Exists"],[8,"Get"],[8,"TryGet"],[8,"TryFuture"],[8,"TryAsyncIterator"],[8,"TryIterator"],[8,"EffectiveExt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
